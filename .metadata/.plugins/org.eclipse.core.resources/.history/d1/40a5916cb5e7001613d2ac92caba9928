package networkConnection;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Scanner;

import Model.Player;

public class Client {

	private Socket socket;
	private BufferedWriter writer;
	private BufferedReader reader;
	private Player player;
	private static final String USAGE = "Arguments: <name> <adress> <port>";
	private static final String EXIT = "exit";
	private String name;

	public enum Error {
		NONE, SOCKET_ERROR, PLAYER_DISCONNECTED, CONNECTION_PROBLEM, IO_EXCEPTION, UNKNOWN_HOST
	}

	/**
	 * 
	 * 
	 * @param name
	 * @param player
	 * @param socket
	 */

	public Client(String name, Socket socket) throws IOException {
		this.socket = socket;

		writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
		reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));

	}

	/**
	 * public Player getPlayer() { return player; }
	 */

	public String getName() {
		return name;
	}

	public static void main(String[] args) throws IOException {
		Scanner input = new Scanner(System.in);
		String line = input.nextLine();
		String[] words = line.split(" ");

		if (args.length != 3) {
			System.out.println(USAGE);
			System.exit(0);
		}

		InetAddress addres = null;
		int port = 0;
		Socket socket = new Socket();

		//

		try {
			addres = InetAddress.getByName(args[1]);
		} catch (UnknownHostException e) {
			System.out.println(USAGE);
			System.out.println("ERROR: host " + args[1] + " unkown");
			System.exit(0);
		}

		//
		try {
			port = Integer.parseInt(args[2]);

		} catch (NumberFormatException e) {
			System.out.println(USAGE);
			System.out.println("ERROR: port " + args[2] + " is not an integer");
			System.exit(0);
		}
		try {
			socket = new Socket(addres, port);
		} catch (IOException e) {
			System.out.println("ERROR: could not create a socket on" + addres + " and port " + port);
		}

		/**
		 * Player player; Client client; switch (args[0]) { case "-S": player =
		 * new ComputerPlayer("Smart", Color.GREEN, new SmartStrategy()); client
		 * = new Client(socket, player); break; case "-N": player = new
		 * ComputerPlayer("Dumb", Color.PURPLE, new DumbStrategy()); client =
		 * new Client(socket, player); break; default: player = new
		 * HumanPlayer(args[0], Color.RED); client = new Client(socket, player);
		 * break;
		 * 
		 * }
		 */

		try {
			BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
			BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
			Scanner input = new Scanner(reader);

			while (input.hasNextLine()) {
				String line = input.nextLine();
				System.out.println(line);
			}

		} catch (IOException e) {

		}

	}
}

// creates a Game object and starts the two way communication
