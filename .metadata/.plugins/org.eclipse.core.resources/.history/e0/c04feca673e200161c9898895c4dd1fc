package controller;

import java.util.Scanner;

import Model.Board;
import Model.Disc.Color;
import Model.Player;
import Model.PlayerList;

public class Game {

	public static int NUMBER_OF_PLAYERS = 2;

	private Board board;

	private PlayerList playerlist;

	private int current;

	/**
	 * Contrsucts a game with two players
	 * 
	 * @param p1
	 * @param p2
	 */

	public Game(Player p1, Player p2) {
		board = new Board();
		playerlist = new PlayerList();
		current = 0;
		playerlist.player.add(p1);
		playerlist.player.add(p2);

	}

	/**
	 * starts the game, resets the game and allows us to play it if we want to
	 * 
	 */

	public void start() {
		boolean keepPlaying = true;
		while (keepPlaying) {

			reset();
			play();
			keepPlaying = readBoolean("\n> Play another time? (y/n)?", "y", "n");
		}

	}

	/**
	 * 
	 * @param prompt
	 * @param yes
	 * @param no
	 * @return
	 */

	private boolean readBoolean(String prompt, String yes, String no) {
		String answer;
		do {
			System.out.print(prompt);

			@SuppressWarnings("resource")
			Scanner in = new Scanner(System.in);
			answer = in.hasNextLine() ? in.nextLine() : null;
		} while (answer == null || (!answer.equals(yes) && !answer.equals(no)));

		return answer.equals(yes);

	}

	/**
	 * resets the game
	 * 
	 */

	private void reset() {
		current = 0;
		board.showCopy();
	}

	/**
	 * iterates through the list of players and checks for every player if
	 * he/she has a column, row or a diagonal line
	 * 
	 * @return true if a player has a winning row, column or diagonal line
	 */

	public boolean hasWinner() {

		boolean haveWinner = false;
		for (Player tempList : playerlist.getPlayers()) {
			Color d = tempList.getDisc();
			haveWinner = isWinner(d);
			if (haveWinner) {
				return haveWinner;
			}
		}

		return haveWinner;

	}

	/**
	 * Checks wether the game needs to be closed or not *
	 * 
	 * @return Returns true if the board is full or we have a winner
	 */

	public boolean gameOver() {
		return (isFull() || hasWinner());

	}

	public boolean isFull() {
		boolean test = false;
		int counter = 0;
		for (Color[][] i : board.allLayers) {
			for (int x = 0; x < Board.X; x++) {
				for (int y = 0; y < Board.Y; y++) {
					if (!i[x][y].equals(Color.EMPTY)) {
						counter++;

					}

				}
			}

		}
		if (counter == 64) {
			test = true;
		}

		return test;
	}

	/**
	 * Checks if a column is filled
	 * 
	 * @param disc
	 * @return Returns true if there are 4 disc at the same color in a column
	 */

	public boolean hasColumn(Color disc) {
		boolean test = false;
		int counter = 0;
		for (int y = 0; y < Board.Y; y++) {

			for (int x = 0; x < Board.X; x++) {
				counter = 0;
				for (Color[][] s : board.allLayers) {
					if (s[x][y].equals(disc)) {
						counter++;
					}
					if (counter == 4) {
						test = true;
						break;
					}

				}
			}

		}

		return test;
	}

	/**
	 * Checks if there is a filled row of that certain disc
	 * 
	 * @param disc
	 * @return True if there is row filled with that disc
	 */

	public boolean hasRow(Color disc) {

		int counter = 0;

		for (Color[][] k : board.allLayers) {
			counter = 0;
			for (int x = 0; x < Board.X; x++) {
				counter = 0;
				for (int y = 0; y < Board.Y; y++) {
					if (k[x][y].equals(disc)) {
						counter++;

					}
					if (counter == 4) {
						return true;
					}

				}
			}
		}
		for (Color[][] g : board.allLayers) {
			counter = 0;
			for (int y = 0; y < Board.Y; y++) {
				counter = 0;
				for (int x = 0; x < Board.X; x++) {
					if (g[x][y].equals(disc)) {
						counter++;

					}
					if (counter == 4) {
						return true;
					}
				}
			}
		}
		return false;

	}

	/**
	 * 
	 * @param disc
	 * @return
	 */

	public boolean hasDiagonal(Color disc) {
		return false;

	}

	/**
	 * Checks wether one of the players has a row, column or a diagonal
	 * 
	 * @param d
	 * @return True if any of these statements are true
	 */
	public boolean isWinner(Color d) {

		return hasColumn(d) || hasRow(d) || hasDiagonal(d);

	}

	/**
	 * Runs the game as long as the board is not full or no one won
	 * 
	 */

	protected void play() {

		current = (int) Math.round(Math.random());
		while (!gameOver()) {
			playerlist.getPlayer(current).makeMove(board);
			current++;
			current = current % Game.NUMBER_OF_PLAYERS;

		}
		board.showCopy();

	}

}