package networkConnection;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;

import Model.Board;
import Model.Player;

public class Client extends Thread {

	private Socket socket;
	private BufferedWriter writer;
	private BufferedReader reader;
	private Player player;
	private Board board;
	private static final String USAGE = "Arguments: <name> <adress> <port>";
	private String name;
	private static final String EXIT = "exit";
	

	/**
	 * 
	 * 
	 * @param name
	 * @param player
	 * @param socket
	 */

	public Client(String name, Socket socket) {
		this.socket = socket;
		this.name = name;

		try {
			writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
			reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
		} catch (IOException e) {
			System.err.println("ERROR: Connection failed");
			e.printStackTrace();

		}
	}

	/**
	 * 
	 * 
	 */

	@Override
	public void run() {
		try {
			String line;
			while ((line = reader.readLine()) != null) {
				String[] words = line.split(" ");
			}

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} finally {

		}
	}

	public void handleTerminalInput() throws IOException {
		String line = null;
		try {
			writer.write(name + "   ");
			writer.newLine();
			writer.flush();
		} catch (IOException e) {
			e.printStackTrace();
		}
		while ((line = reader.readLine()) != null) {
			if (line.equals(EXIT)) {
				shutDown();
				return;
			}
			try {
				writer.write(line);
				writer.newLine();
				writer.flush();
			} catch (IOException e) {
				System.out.println("ERROR: could not write to outputstream");
				shutDown();
			}

		}
	}

	/**
	 * 
	 * 
	 * 
	 */
	public void shutDown() {
		try {
			socket.close();
		} catch (IOException e) {

		}
	}

	public static void main(String[] args) {
		if (args.length != 3) {
			System.out.println(USAGE);
			System.exit(0);
		}

		String name = args[0];
		InetAddress addres = null;
		int port = 0;
		Socket socket = null;

		//

		try {
			addres = InetAddress.getByName(args[1]);
		} catch (UnknownHostException e) {
			System.out.println(USAGE);
			System.out.println("ERROR: host " + args[1] + " unkown");
			System.exit(0);
		}

		//
		try {
			port = Integer.parseInt(args[2]);

		} catch (NumberFormatException e) {
			System.out.println(USAGE);
			System.out.println("ERROR: port " + args[2] + " is not an integer");
			System.exit(0);
		}
		try {
			socket = new Socket(addres, port);
		} catch (IOException e) {
			System.out.println("ERROR: could not create a socket on" + addres + " and port " + port);
		}

		// creates a Game object and starts the two way communication

	}
}
